version: '3.8'

services:
  postgres:
    container_name: bigbrother_postgres
    build:
      context: ./postgres
      dockerfile: Dockerfile
      args:
        - POSTGRES_DB=bigbrother
        - POSTGRES_USER=bigbrother
        - POSTGRES_PASSWORD=bigbrother
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=bigbrother
      - POSTGRES_USER=bigbrother
      - POSTGRES_PASSWORD=bigbrother
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - bigbrother_postgres_data:/var/lib/postgresql/data
    networks:
      - bigbrother_net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U bigbrother"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    container_name: bigbrother_kafka
    build:
      context: ./kafka
      dockerfile: Dockerfile
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      - KAFKA_PROCESS_ROLES=broker,controller
      - KAFKA_NODE_ID=1
      - KAFKA_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      - KAFKA_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1
      - KAFKA_TRANSACTION_STATE_LOG_MIN_ISR=1
      - KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS=0
      - KAFKA_LOG_DIRS=/var/lib/kafka/data
      - KAFKA_CLUSTER_ID=MkU3OEVBNTcwNTJENDM2Qk
    volumes:
      - bigbrother_kafka_data:/var/lib/kafka/data
      - ./kafka/topics.json:/etc/kafka/topics.json:ro
    networks:
      - bigbrother_net
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list"]
      interval: 30s
      timeout: 10s
      retries: 3

  minio:
    container_name: bigbrother_minio
    build:
      context: ./minio
      dockerfile: Dockerfile
      args:
        - MINIO_ROOT_USER=bigbrother
        - MINIO_ROOT_PASSWORD=bigbrother
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=bigbrother
      - MINIO_ROOT_PASSWORD=bigbrother
      - MINIO_PROMETHEUS_AUTH_TYPE=public
    volumes:
      - bigbrother_minio_data:/data
    networks:
      - bigbrother_net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3

  mlflow:
    container_name: bigbrother_mlflow
    build:
      context: ./mlflow
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    environment:
      - MLFLOW_S3_ENDPOINT_URL=http://minio:9000
      - AWS_ACCESS_KEY_ID=bigbrother
      - AWS_SECRET_ACCESS_KEY=bigbrother
      - MLFLOW_BACKEND_STORE_URI=postgresql://bigbrother:bigbrother@postgres:5432/bigbrother
      - MLFLOW_DEFAULT_ARTIFACT_ROOT=s3://models/
    volumes:
      - bigbrother_mlflow_data:/var/log/mlflow
    networks:
      - bigbrother_net
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  prometheus:
    container_name: bigbrother_prometheus
    image: prom/prometheus:v2.48.0
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - bigbrother_prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - bigbrother_net
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  grafana:
    container_name: bigbrother_grafana
    build:
      context: ./grafana
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_ALLOW_EMBEDDING=true
      - GF_AUTH_ANONYMOUS_ENABLED=false
    volumes:
      - bigbrother_grafana_data:/var/lib/grafana
    networks:
      - bigbrother_net
    depends_on:
      prometheus:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  fastapi:
    container_name: bigbrother_fastapi
    build:
      context: .
      dockerfile: fastapi/Dockerfile
    ports:
      - "8000:8000"
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=bigbrother
      - MINIO_SECRET_KEY=bigbrother
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=bigbrother
      - DB_USER=bigbrother
      - DB_PASSWORD=bigbrother
      - DETECTRON2_SERVICE_URL=http://detectron2:8001
    volumes:
      - ../big_brother_cnn:/app/big_brother_cnn:ro
    networks:
      - bigbrother_net
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      minio:
        condition: service_healthy
      mlflow:
        condition: service_healthy
      detectron2:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  detectron2:
    container_name: bigbrother_detectron2
    build:
      context: ./detectron2
      dockerfile: Dockerfile
    ports:
      - "8001:8001"
    networks:
      - bigbrother_net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  ultralytics:
    container_name: bigbrother_ultralytics
    build:
      context: ./ultralytics
      dockerfile: Dockerfile
    ports:
      - "8002:8002"
    networks:
      - bigbrother_net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  cassandra:
    container_name: bigbrother_cassandra
    build:
      context: ./cassandra
      dockerfile: Dockerfile
    ports:
      - "9042:9042"
    environment:
      - CASSANDRA_CLUSTER_NAME=bigbrother_cluster
      - CASSANDRA_DC=dc1
      - CASSANDRA_RACK=rack1
      - CASSANDRA_ENDPOINT_SNITCH=GossipingPropertyFileSnitch
    volumes:
      - bigbrother_cassandra_data:/var/lib/cassandra
    networks:
      - bigbrother_net
    healthcheck:
      test: ["CMD", "cqlsh", "-e", "describe keyspaces"]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  bigbrother_postgres_data:
    driver: local
  bigbrother_kafka_data:
    driver: local
  bigbrother_minio_data:
    driver: local
  bigbrother_mlflow_data:
    driver: local
  bigbrother_prometheus_data:
    driver: local
  bigbrother_grafana_data:
    driver: local
  bigbrother_cassandra_data:
    driver: local

networks:
  bigbrother_net:
    driver: bridge 