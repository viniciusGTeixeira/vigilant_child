#!/usr/bin/env python3
"""
Exemplo de uso do sistema integrado de an√°lise Big Brother CNN
Demonstra todas as funcionalidades dos analyzers especializados
"""

import os
import sys
import torch
import numpy as np
from PIL import Image
from datetime import datetime
import json

# Adicionar path para importar m√≥dulos
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from integrated_analysis import IntegratedAnalysisSystem
from utils import load_config
from torchvision import transforms


def create_sample_image():
    """
    Cria uma imagem de exemplo para demonstra√ß√£o
    """
    # Criar imagem sint√©tica de 224x224x3
    sample_image = np.random.randint(0, 255, (224, 224, 3), dtype=np.uint8)
    
    # Simular uma pessoa (ret√¢ngulo central)
    sample_image[80:180, 90:140] = [100, 150, 200]  # √Årea da "face"
    sample_image[120:200, 85:145] = [50, 100, 150]   # √Årea do "corpo"
    
    return sample_image


def prepare_image_tensor(image_array):
    """
    Converte array numpy para tensor PyTorch no formato esperado
    """
    # Converter para PIL Image
    pil_image = Image.fromarray(image_array)
    
    # Aplicar transforma√ß√µes
    transform = transforms.Compose([
        transforms.ToTensor(),
        transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
    ])
    
    tensor = transform(pil_image)
    return tensor


def demo_comprehensive_analysis():
    """
    Demonstra an√°lise completa do sistema integrado
    """
    print("üöÄ DEMO: Sistema Integrado Big Brother CNN")
    print("=" * 60)
    
    try:
        # 1. Inicializar sistema
        print("1Ô∏è‚É£ Inicializando sistema integrado...")
        analysis_system = IntegratedAnalysisSystem('config.yaml')
        print("‚úÖ Sistema inicializado com sucesso\n")
        
        # 2. Preparar dados de exemplo
        print("2Ô∏è‚É£ Preparando dados de exemplo...")
        sample_image = create_sample_image()
        image_tensor = prepare_image_tensor(sample_image)
        
        # Metadados de exemplo
        metadata = {
            'location': 'office_main',
            'timestamp': datetime.now().isoformat(),
            'camera_id': 'cam_001',
            'area_type': 'employee_area'
        }
        
        print(f"‚úÖ Imagem preparada: {image_tensor.shape}")
        print(f"‚úÖ Metadados: {metadata}\n")
        
        # 3. Executar an√°lise completa
        print("3Ô∏è‚É£ Executando an√°lise integrada...")
        print("   - An√°lise facial")
        print("   - An√°lise de atributos")
        print("   - Detec√ß√£o de crach√°")
        print("   - Verifica√ß√£o de hor√°rios")
        print("   - An√°lise de padr√µes")
        print()
        
        results = analysis_system.analyze_comprehensive(image_tensor, metadata)
        
        print(f"‚úÖ An√°lise conclu√≠da em {results['execution_time']:.2f}s\n")
        
        # 4. Apresentar resultados
        print("4Ô∏è‚É£ RESULTADOS DA AN√ÅLISE")
        print("=" * 40)
        
        # Resumo geral
        summary = analysis_system.get_analysis_summary(results)
        print("üìä RESUMO GERAL:")
        for key, value in summary.items():
            print(f"   {value}")
        print()
        
        # Resultados individuais
        print("üîç AN√ÅLISES INDIVIDUAIS:")
        individual_analyses = results.get('individual_analyses', {})
        
        for analyzer_name, analysis_result in individual_analyses.items():
            print(f"\nüîπ {analyzer_name.upper()} ANALYZER:")
            
            if 'error' in analysis_result:
                print(f"   ‚ùå Erro: {analysis_result['error']}")
                continue
            
            # Mostrar principais m√©tricas
            confidence = analysis_result.get('confidence', 0.0)
            detected = analysis_result.get('detected', False)
            
            print(f"   Detectado: {'‚úÖ' if detected else '‚ùå'}")
            print(f"   Confian√ßa: {confidence:.1%}")
            
            # Informa√ß√µes espec√≠ficas por analyzer
            if analyzer_name == 'face':
                if analysis_result.get('employee_detected', False):
                    employee_info = analysis_result.get('employee_info', {})
                    print(f"   üë§ Funcion√°rio: {employee_info.get('name', 'Unknown')}")
                else:
                    print("   üë§ Funcion√°rio: N√£o identificado")
                
            elif analyzer_name == 'attributes':
                formal_score = analysis_result.get('formal_score', 0.0)
                dress_compliant = analysis_result.get('dress_code_compliant', False)
                print(f"   üëî Dress Code: {'‚úÖ' if dress_compliant else '‚ùå'}")
                print(f"   üìä Score Formal: {formal_score:.1%}")
                
            elif analyzer_name == 'badge':
                has_badge = analysis_result.get('has_valid_badge', False)
                visible = analysis_result.get('badge_visible', False)
                print(f"   üè∑Ô∏è Crach√° V√°lido: {'‚úÖ' if has_badge else '‚ùå'}")
                print(f"   üëÅÔ∏è Vis√≠vel: {'‚úÖ' if visible else '‚ùå'}")
                
            elif analyzer_name == 'schedule':
                compliance = analysis_result.get('compliance_status', 'unknown')
                expected = analysis_result.get('expected_status', 'unknown')
                print(f"   ‚è∞ Status Esperado: {expected}")
                print(f"   ‚úÖ Conformidade: {compliance}")
        
        # An√°lise integrada
        print("\nüîó AN√ÅLISE INTEGRADA:")
        integrated_assessment = results.get('integrated_assessment', {})
        
        # Viola√ß√µes de pol√≠tica
        violations = integrated_assessment.get('policy_violations', [])
        if violations:
            print(f"   ‚ö†Ô∏è Viola√ß√µes: {len(violations)}")
            for violation in violations[:3]:  # Mostrar at√© 3
                print(f"      - {violation['description']}")
        else:
            print("   ‚úÖ Nenhuma viola√ß√£o detectada")
        
        # Indicadores de risco
        risk_indicators = integrated_assessment.get('risk_indicators', {})
        risk_level = risk_indicators.get('overall_risk_level', 'low')
        print(f"   üéØ N√≠vel de Risco: {risk_level.upper()}")
        
        # Alertas
        alerts = results.get('alerts', [])
        if alerts:
            print(f"\nüö® ALERTAS ({len(alerts)}):")
            for alert in alerts:
                severity_icon = {'low': 'üü¢', 'medium': 'üü°', 'high': 'üü†', 'critical': 'üî¥'}
                icon = severity_icon.get(alert.get('severity', 'low'), '‚ö™')
                print(f"   {icon} {alert['title']}")
                print(f"      {alert['description']}")
        else:
            print("\n‚úÖ Nenhum alerta gerado")
        
        # Recomenda√ß√µes
        recommendations = results.get('recommendations', [])
        if recommendations:
            print(f"\nüí° RECOMENDA√á√ïES:")
            for i, rec in enumerate(recommendations[:5], 1):  # Top 5
                print(f"   {i}. {rec}")
        
        # 5. Salvar resultados
        print("\n5Ô∏è‚É£ Salvando resultados...")
        
        # Criar diret√≥rio de relat√≥rios se n√£o existir
        os.makedirs('reports', exist_ok=True)
        
        # Salvar relat√≥rio completo
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        report_file = f"reports/integrated_analysis_{timestamp}.json"
        
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(results, f, indent=2, ensure_ascii=False, default=str)
        
        print(f"‚úÖ Relat√≥rio salvo: {report_file}")
        
        # Salvar resumo leg√≠vel
        summary_file = f"reports/summary_{timestamp}.txt"
        with open(summary_file, 'w', encoding='utf-8') as f:
            f.write("RELAT√ìRIO DE AN√ÅLISE BIG BROTHER CNN\n")
            f.write("=" * 50 + "\n\n")
            f.write(f"Timestamp: {results['timestamp']}\n")
            f.write(f"Localiza√ß√£o: {metadata['location']}\n")
            f.write(f"Tempo de Execu√ß√£o: {results['execution_time']:.2f}s\n\n")
            
            f.write("RESUMO GERAL:\n")
            for key, value in summary.items():
                f.write(f"  {value}\n")
            
            f.write(f"\nVIOLA√á√ïES: {len(violations)}\n")
            f.write(f"ALERTAS: {len(alerts)}\n")
            f.write(f"N√çVEL DE RISCO: {risk_level.upper()}\n")
        
        print(f"‚úÖ Resumo salvo: {summary_file}")
        print("\nüéâ Demo conclu√≠da com sucesso!")
        
    except Exception as e:
        print(f"‚ùå Erro durante a demo: {e}")
        import traceback
        traceback.print_exc()


def demo_individual_analyzers():
    """
    Demonstra uso individual de cada analyzer
    """
    print("\nüî¨ DEMO: Analyzers Individuais")
    print("=" * 40)
    
    try:
        config = load_config('config.yaml')
        device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
        
        # Preparar imagem
        sample_image = create_sample_image()
        image_tensor = prepare_image_tensor(sample_image)
        
        # Testar cada analyzer individualmente
        from analyzers import FaceAnalyzer, AttributeAnalyzer, BadgeAnalyzer
        
        print("1. Face Analyzer...")
        face_analyzer = FaceAnalyzer(config, device)
        face_analyzer.load_model()
        face_results = face_analyzer.analyze(image_tensor)
        print(f"   Resultado: {face_results.get('faces_count', 0)} face(s) detectada(s)")
        
        print("2. Attribute Analyzer...")
        attr_analyzer = AttributeAnalyzer(config, device)
        attr_analyzer.load_model()
        attr_results = attr_analyzer.analyze(image_tensor)
        print(f"   Resultado: {attr_results.get('persons_count', 0)} pessoa(s) analisada(s)")
        
        print("3. Badge Analyzer...")
        badge_analyzer = BadgeAnalyzer(config, device)
        badge_analyzer.load_model()
        badge_results = badge_analyzer.analyze(image_tensor)
        print(f"   Resultado: {badge_results.get('badges_count', 0)} crach√°(s) detectado(s)")
        
        print("\n‚úÖ Teste individual dos analyzers conclu√≠do!")
        
    except Exception as e:
        print(f"‚ùå Erro no teste individual: {e}")


def main():
    """
    Fun√ß√£o principal
    """
    print("üè¢ BIG BROTHER CNN - SISTEMA DE VIGIL√ÇNCIA INTELIGENTE")
    print("Sistema modular com analyzers especializados")
    print("=" * 60)
    
    # Verificar se estamos no diret√≥rio correto
    if not os.path.exists('config.yaml'):
        print("‚ùå Arquivo config.yaml n√£o encontrado!")
        print("   Execute este script no diret√≥rio big_brother_cnn/")
        return
    
    try:
        # Menu de op√ß√µes
        print("\nOp√ß√µes dispon√≠veis:")
        print("1. Demo An√°lise Integrada (Recomendado)")
        print("2. Demo Analyzers Individuais")
        print("3. An√°lise Completa + Individual")
        
        choice = input("\nEscolha uma op√ß√£o (1-3): ").strip()
        
        if choice == "1":
            demo_comprehensive_analysis()
        elif choice == "2":
            demo_individual_analyzers()
        elif choice == "3":
            demo_comprehensive_analysis()
            demo_individual_analyzers()
        else:
            print("Executando demo padr√£o...")
            demo_comprehensive_analysis()
    
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è Demo interrompida pelo usu√°rio")
    except Exception as e:
        print(f"\n‚ùå Erro geral: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main() 