#!/usr/bin/env python3
"""
Script de teste para validar o sistema Big Brother CNN
"""

import os
import sys
import torch
import numpy as np
from PIL import Image
from utils import load_config, create_directories
from models.cnn_model import BigBrotherCNN

def create_dummy_images(num_images=20):
    """
    Cria imagens dummy para teste do sistema
    """
    images_dir = "data/imagens"
    os.makedirs(images_dir, exist_ok=True)
    
    print(f"Criando {num_images} imagens dummy para teste...")
    
    for i in range(num_images):
        # Criar imagem aleat√≥ria
        img_array = np.random.randint(0, 255, (224, 224, 3), dtype=np.uint8)
        img = Image.fromarray(img_array)
        
        # Salvar com nome que inclui a classe
        class_id = i % 10  # Distribuir entre 10 classes
        filename = f"funcionario_{i:03d}_classe_{class_id}.jpg"
        img.save(os.path.join(images_dir, filename))
    
    print(f"‚úÖ {num_images} imagens criadas em {images_dir}")

def test_model_creation():
    """
    Testa a cria√ß√£o do modelo
    """
    print("\n=== TESTANDO CRIA√á√ÉO DO MODELO ===")
    
    try:
        # Carregar configura√ß√£o
        config = load_config('config.yaml')
        
        # Criar modelo
        model = BigBrotherCNN('config.yaml')
        
        # Verificar device
        device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
        model.device = device
        model.model = model.model.to(device)
        
        # Obter sum√°rio
        summary = model.get_model_summary()
        
        print(f"‚úÖ Modelo criado com sucesso!")
        print(f"   - Device: {summary['device']}")
        print(f"   - Par√¢metros totais: {summary['total_parameters']:,}")
        print(f"   - Par√¢metros trein√°veis: {summary['trainable_parameters']:,}")
        print(f"   - N√∫mero de classes: {summary['num_classes']}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao criar modelo: {e}")
        return False

def test_data_loading():
    """
    Testa o carregamento de dados
    """
    print("\n=== TESTANDO CARREGAMENTO DE DADOS ===")
    
    try:
        from utils import create_data_loaders
        
        # Carregar configura√ß√£o
        config = load_config('config.yaml')
        
        # Criar DataLoaders
        train_loader, val_loader, test_loader = create_data_loaders('data', config)
        
        print(f"‚úÖ DataLoaders criados com sucesso!")
        print(f"   - Batches de treino: {len(train_loader)}")
        print(f"   - Batches de valida√ß√£o: {len(val_loader)}")
        print(f"   - Batches de teste: {len(test_loader)}")
        
        # Testar um batch
        if len(train_loader) > 0:
            batch = next(iter(train_loader))
            images, labels = batch
            print(f"   - Formato do batch: {images.shape}")
            print(f"   - Labels: {labels.shape}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao carregar dados: {e}")
        return False

def test_inference():
    """
    Testa a infer√™ncia do modelo
    """
    print("\n=== TESTANDO INFER√äNCIA ===")
    
    try:
        # Carregar configura√ß√£o
        config = load_config('config.yaml')
        
        # Criar modelo
        model = BigBrotherCNN('config.yaml')
        device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
        model.device = device
        model.model = model.model.to(device)
        
        # Criar imagem dummy
        dummy_image = torch.randn(1, 3, 224, 224).to(device)
        
        # Fazer predi√ß√£o
        predictions = model.predict(dummy_image)
        
        print(f"‚úÖ Infer√™ncia realizada com sucesso!")
        print(f"   - Formato da predi√ß√£o: {predictions.shape}")
        print(f"   - Classe predita: {np.argmax(predictions[0])}")
        print(f"   - Confian√ßa: {np.max(predictions[0]):.3f}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na infer√™ncia: {e}")
        return False

def test_schedule_analysis():
    """
    Testa a an√°lise de hor√°rios
    """
    print("\n=== TESTANDO AN√ÅLISE DE HOR√ÅRIOS ===")
    
    try:
        from utils import analyze_schedule_patterns, load_routines
        
        # Analisar padr√µes de hor√°rio
        patterns = analyze_schedule_patterns('data/horarios.csv')
        
        if patterns:
            print(f"‚úÖ Padr√µes de hor√°rio analisados!")
            print(f"   - Grades encontradas: {list(patterns.keys())}")
            
            # Mostrar alguns exemplos
            for grade, horarios in list(patterns.items())[:3]:
                print(f"   - {grade}: {len(horarios)} hor√°rios")
        
        # Carregar rotinas
        routines = load_routines('data/rotinas.json')
        
        if routines:
            print(f"‚úÖ Rotinas carregadas!")
            print(f"   - Tipos de rotina: {list(routines.get('rotinas', {}).keys())}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na an√°lise de hor√°rios: {e}")
        return False

def test_configuration():
    """
    Testa a configura√ß√£o do sistema
    """
    print("\n=== TESTANDO CONFIGURA√á√ÉO ===")
    
    try:
        # Carregar configura√ß√£o
        config = load_config('config.yaml')
        
        # Verificar se√ß√µes principais
        required_sections = ['model', 'data', 'training', 'inference', 'device']
        
        for section in required_sections:
            if section not in config:
                raise ValueError(f"Se√ß√£o '{section}' n√£o encontrada na configura√ß√£o")
        
        print(f"‚úÖ Configura√ß√£o validada!")
        print(f"   - Se√ß√µes encontradas: {list(config.keys())}")
        print(f"   - N√∫mero de classes: {config['model']['num_classes']}")
        print(f"   - Batch size: {config['model']['batch_size']}")
        print(f"   - √âpocas: {config['model']['epochs']}")
        
        # Criar diret√≥rios
        create_directories(config)
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na configura√ß√£o: {e}")
        return False

def main():
    """
    Fun√ß√£o principal de teste
    """
    print("üöÄ INICIANDO TESTES DO SISTEMA BIG BROTHER CNN")
    print("=" * 50)
    
    tests = [
        ("Configura√ß√£o", test_configuration),
        ("Cria√ß√£o de imagens dummy", lambda: create_dummy_images(20)),
        ("Cria√ß√£o do modelo", test_model_creation),
        ("Carregamento de dados", test_data_loading),
        ("Infer√™ncia", test_inference),
        ("An√°lise de hor√°rios", test_schedule_analysis),
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            if test_func is create_dummy_images:
                test_func()
                results.append((test_name, True))
            else:
                result = test_func()
                results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå Erro no teste '{test_name}': {e}")
            results.append((test_name, False))
    
    # Resumo dos resultados
    print("\n" + "=" * 50)
    print("üìä RESUMO DOS TESTES")
    print("=" * 50)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ PASSOU" if result else "‚ùå FALHOU"
        print(f"{test_name:<25} {status}")
        if result:
            passed += 1
    
    print(f"\nResultado: {passed}/{total} testes passaram")
    
    if passed == total:
        print("üéâ Todos os testes passaram! Sistema pronto para uso.")
    else:
        print("‚ö†Ô∏è  Alguns testes falharam. Verifique os erros acima.")
    
    return passed == total

if __name__ == "__main__":
    # Mudar para o diret√≥rio correto
    if os.path.basename(os.getcwd()) != 'big_brother_cnn':
        if os.path.exists('big_brother_cnn'):
            os.chdir('big_brother_cnn')
        else:
            print("‚ùå Diret√≥rio 'big_brother_cnn' n√£o encontrado!")
            sys.exit(1)
    
    success = main()
    sys.exit(0 if success else 1) 